{"version":3,"sources":["app.js","websocket-communicator.service.js","chat-room/chat-room.controller.js","entrance/entrance.controller.js"],"names":["angular","module","config","$stateProvider","$urlRouterProvider","otherwise","state","url","templateUrl","controller","factory","connect","address","room","user","ws","WebSocket","onmessage","evt","message","JSON","parse","data","msgType","callbacks","receiveMessage","setTimeout","send","stringify","setReceiveMessageCallback","callback","setCloseConnectionCallback","close","onclose","disconnect","sendMessage","messageObj","$scope","$state","$stateParams","wsCommunicator","roomMessages","push","color","author","text","$apply","console","log","window","location","host","checkEnterPossible","enterRoom","go"],"mappings":"AAAA,YAEAA,SACAC,OAAA,aACA,cAEAC,QAAA,iBAAA,qBAAA,SAAAC,EAAAC,GACAA,EAAAC,UAAA,aAEAF,EACAG,MAAA,YACAC,IAAA,YACAC,YAAA,gCACAC,WAAA,uBAEAH,MAAA,YACAC,IAAA,qCACAC,YAAA,kCACAC,WAAA,0BChBAT,QAAAC,OAAA,aAAAS,QAAA,iBAAA,WAKA,QAAAC,GAAAC,EAAAC,EAAAC,GACAC,EAAA,GAAAC,WAAA,QAAAJ,EAAA,WACAG,EAAAE,UAAA,SAAAC,GACA,GAAAC,GAAAC,KAAAC,MAAAH,EAAAI,KACA,2BAAAH,EAAAI,SAAA,kBAAAC,GAAAC,gBACAD,EAAAC,eAAAL,KAAAC,MAAAF,EAAAG,QAGAI,WAAA,WACAX,EAAAY,KAAAP,KAAAQ,WACAL,QAAA,YACAD,KAAAF,KAAAQ,WACAf,KAAAA,EACAC,KAAAA,QAGA,KAGA,QAAAe,GAAAC,GACAN,EAAAC,eAAAK,EAGA,QAAAC,GAAAD,GACAN,EAAAQ,MAAAF,EACAf,IACAA,EAAAkB,QAAAH,GAIA,QAAAI,KACAnB,EAAAiB,QAGA,QAAAG,GAAAC,GACArB,EAAAY,KAAAP,KAAAQ,WACAL,QAAA,oBACAD,KAAAF,KAAAQ,UAAAQ,MAxCA,GAAArB,GACAS,IA2CA,QACAb,QAAAA,EACAuB,WAAAA,EACAC,YAAAA,EACAN,0BAAAA,EACAE,2BAAAA,KCnDA/B,QAAAC,OAAA,aAAAQ,WAAA,sBAAA,SAAA,SAAA,eAAA,iBAAA,SAAA4B,EAAAC,EAAAC,EAAAC,GACAH,EAAAxB,KAAA0B,EAAA1B,KACAwB,EAAAvB,KAAAyB,EAAAzB,KAEAuB,EAAAlB,SACAA,QAAA,IAGAkB,EAAAI,gBAEAD,EAAAX,0BAAA,SAAAO,GACAC,EAAAI,aAAAC,MACAC,MAAAP,EAAAQ,SAAAP,EAAAvB,KAAA,OAAA,QACA+B,KAAA,IAAAT,EAAAQ,OAAA,MAAAR,EAAAjB,UAEAkB,EAAAS,WAGAN,EAAAT,2BAAA,WACAgB,QAAAC,IAAA,uBAGAR,EAAA7B,QAAAsC,OAAAC,SAAAC,KAAAd,EAAAxB,KAAAwB,EAAAvB,MAEAuB,EAAAF,YAAA,WACAK,EAAAL,YAAAE,EAAAlB,SACAkB,EAAAlB,QAAA,OC1BAnB,QAAAC,OAAA,aAAAQ,WAAA,sBAAA,SAAA,SAAA,iBAAA,SAAA4B,EAAAC,EAAAE,GACAH,EAAAe,mBAAA,WACA,MAAAf,GAAAvB,MAAAuB,EAAAxB,MAGAwB,EAAAgB,UAAA,WACAhB,EAAAvB,MAAAuB,EAAAxB,MAEAyB,EAAAgB,GAAA,YAAAxC,KAAAuB,EAAAvB,KAAAD,KAAAwB,EAAAxB","file":"app.js","sourcesContent":["'use strict';\n\nangular\n    .module('webClient', [\n        'ui.router'\n    ])\n    .config(['$stateProvider', '$urlRouterProvider', function ($stateProvider, $urlRouterProvider) {\n        $urlRouterProvider.otherwise('/entrance');\n\n        $stateProvider\n            .state('entrance', {\n                url: '/entrance',\n                templateUrl: '/pages/entrance/entrance.html',\n                controller: 'EntranceController'\n            })\n            .state('chatRoom', {\n                url: '/chat-room/user/{user}/room/{room}',\n                templateUrl: '/pages/chat-room/chat-room.html',\n                controller: 'ChatRoomController'\n            })\n    }]);\n","'use strict';\n\nangular.module('webClient').factory('wsCommunicator', function() {\n\n    var ws;\n    var callbacks = {};\n\n    function connect(address, room, user) {\n        ws = new WebSocket('ws://' + address + '/api/ws');\n        ws.onmessage = function(evt) {\n            var message = JSON.parse(evt.data);\n            if (message.msgType == 'BROADCAST_TEXT_MESSAGE' && typeof callbacks.receiveMessage === 'function') {\n                callbacks.receiveMessage(JSON.parse(message.data));\n            }\n        };\n        setTimeout(function() {\n            ws.send(JSON.stringify({\n                msgType: 'HANDSHAKE',\n                data: JSON.stringify({\n                    room: room,\n                    user: user\n                })\n            }));\n        }, 300); //fixme: hardcode 1 sec is hack. Optimize it later\n    }\n\n    function setReceiveMessageCallback(callback) {\n        callbacks.receiveMessage = callback;\n    }\n\n    function setCloseConnectionCallback(callback) {\n        callbacks.close = callback;\n        if (ws) {\n            ws.onclose = callback;\n        }\n    }\n\n    function disconnect() {\n        ws.close();\n    }\n\n    function sendMessage(messageObj) {\n        ws.send(JSON.stringify({\n            msgType: 'SEND_TEXT_MESSAGE',\n            data: JSON.stringify(messageObj)\n        }));\n    }\n\n    return {\n        connect: connect,\n        disconnect: disconnect,\n        sendMessage: sendMessage,\n        setReceiveMessageCallback: setReceiveMessageCallback,\n        setCloseConnectionCallback: setCloseConnectionCallback\n    }\n});","'use strict';\n\nangular.module('webClient').controller('ChatRoomController', ['$scope', '$state', '$stateParams', 'wsCommunicator', function($scope, $state, $stateParams, wsCommunicator) {\n    $scope.room = $stateParams.room;\n    $scope.user = $stateParams.user;\n\n    $scope.message = {\n        message: ''\n    };\n\n    $scope.roomMessages = [];\n\n    wsCommunicator.setReceiveMessageCallback(function(messageObj) {\n        $scope.roomMessages.push({\n            color: messageObj.author === $scope.user ? 'blue' : 'black',\n            text: '[' + messageObj.author + ']: ' + messageObj.message\n        });\n        $scope.$apply(); //fixme: incapsulate digest in wsCommunicator\n    });\n\n    wsCommunicator.setCloseConnectionCallback(function() {\n       console.log('connection closed')\n    });\n\n    wsCommunicator.connect(window.location.host, $scope.room, $scope.user);\n\n    $scope.sendMessage = function() {\n        wsCommunicator.sendMessage($scope.message);\n        $scope.message = ''; //fixme: if message not receive?\n    }\n\n}]);","'use strict';\n\nangular.module('webClient').controller('EntranceController', ['$scope', '$state', 'wsCommunicator', function($scope, $state, wsCommunicator) {\n    $scope.checkEnterPossible = function() {\n        return $scope.user && $scope.room;\n    };\n\n    $scope.enterRoom = function() {\n        if ($scope.user && $scope.room) {\n            //todo: may be ws enter signal. think later.\n            $state.go('chatRoom', {user: $scope.user ,room: $scope.room});\n        }\n    };\n}]);"],"sourceRoot":"/source/"}